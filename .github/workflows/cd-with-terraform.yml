name: CD with terraform

on:
  workflow_run:
    workflows: ["CI"]  # Name of the CI workflow
    types:
      - completed
  workflow_dispatch:  # Allow manual triggering
    inputs:
      destroy_infrastructure:
        description: 'Do you want to destroy the infrastructure?'
        required: true
        default: 'no'

jobs:
  build-Test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3


      - name: Login to Docker Hub # prepares the environment. 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # github secrets
          password: ${{ secrets.DOCKER_PASSWORD }} # github secrets
      

      - name: Install Docker Compose
        run: |
            curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            docker-compose --version  # Verify Docker Compose installation

      - name: Set Environment Variables # GITHUB_ENV - just to access them quicker in current job by name only.
        run: |
            echo "IMAGE_NAME=arielk2511/star_meme_sql_compose" >> $GITHUB_ENV
            echo "IMAGE_TAG=1.0.${{ github.run_number }}" >> $GITHUB_ENV
            echo "DB_HOST=${{ vars.DB_HOST }}" >> $GITHUB_ENV
            echo "DB_USER=${{ vars.DB_USER }}" >> $GITHUB_ENV
            echo "DB_NAME=${{ vars.DB_NAME }}" >> $GITHUB_ENV
            echo "FLASK_PORT=${{ vars.FLASK_PORT }}" >> $GITHUB_ENV
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
      
      - name: Debug Environment Variables
        run: |
              echo "IMAGE_NAME=${IMAGE_NAME}"
              echo "IMAGE_TAG=${IMAGE_TAG}"

      - name: Build Docker Compose Image
        run: |
            pwd
            ls
            docker build -t ${IMAGE_NAME}:latest .
            docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
        env:
            IMAGE_NAME: ${{ env.IMAGE_NAME }}
            IMAGE_TAG: ${{ env.IMAGE_TAG }}
  
      - name: Push Docker Image
        run: |
            docker images    
            docker push ${IMAGE_NAME}:${IMAGE_TAG}
            docker push ${IMAGE_NAME}:latest

      - name: Run Tests
        run: |
            docker compose up -d  # Start containers
            echo "Waiting for application to start..."
            until curl --fail --max-time 120 http://localhost:5000; do
              echo "Waiting for application to start..."
              sleep 5
            done
            echo "Application started successfully!"

  deploy: # using terraform to deploy to aws ec2.
    runs-on: ubuntu-latest
    needs: build-Test # ensures that the build-test job has completed successfully.
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
  
      - name: debug Checkout
        run: |
          ls
          pwd

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with: 
          terraform_wrapper: false

      - name: Terraform Init
        run: |
          cd terraform
          terraform init 

      - name: Configure AWS Credentials # can be used also without built action, but it is recommended.
        uses: aws-actions/configure-aws-credentials@v2 # with aws configure set commands.
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve