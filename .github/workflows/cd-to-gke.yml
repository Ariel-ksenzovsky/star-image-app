name: 'Deploy to GKE'

on:
  push:
    branches: 
      - "main"
    paths:
      - "charts/**"
  pull_request:
    branches:
      - "main"
    paths:
      - "charts/**"
  workflow_run:
    workflows: ["CI"]  # Replace with the name of your CI workflow
    types:
      - completed  # Trigger only when the CI pipeline is completed



jobs:
  setup-build-publish-deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}  # Ensure the job runs only if CI succeeds
    name: 'Setup, Build, Publish, and Deploy'
    runs-on: 'ubuntu-latest'
    environment: 'production'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      
      - name: Configure AWS Credentials # for s3 tf remote state - accessing s3 bucket.
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install kubectl
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client
  
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm version

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.6.0
        with:
          version: 'latest'
          project_id: ${{ secrets.GCP_PROJECT }}
          credentials: ${{ secrets.GCP_SA_KEY }}

      - name: Install gke-gcloud-auth-plugin
        run: |
          # Install the Google Cloud SDK if it's not already installed
          curl https://sdk.cloud.google.com | bash
          source $HOME/google-cloud-sdk/path.bash.inc
          # Install the plugin using the appropriate command
          gcloud components update
          gcloud components install gke-gcloud-auth-plugin


      - name: Set up Google Cloud credentials for Terraform
        run: |
          ECHO '${{ secrets.GCP_SA_KEY }}' | base64 --decode > /tmp/key.json
          echo "GOOGLE_CREDENTIALS=/tmp/key.json" >> $GITHUB_ENV

      - name: Initialize Terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        run: |
          cd terraform-gcp
          terraform init

      - name: Apply Terraform
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        run: |
          cd terraform-gcp
          terraform apply -auto-approve

      - name: Authenticate with Google Cloud
        run: |
          echo "$GCP_SA_KEY" > ${HOME}/gcp-key.json
          gcloud auth activate-service-account --key-file=${HOME}/gcp-key.json
          gcloud config set project $GCP_PROJECT
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
        
      - name: Fetch GKE Credentials
        run: |
          gcloud container clusters get-credentials ariel-flask-cluster --zone us-central1-a --project $GCP_PROJECT
        env:
          GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
        
      - name: Update Helm Chart Version
        run: |
          CHART_VERSION="1.0.${{ github.run_number }}"
          echo "Updating Chart version to $CHART_VERSION"
          sed -i "s/^version:.*/version: $CHART_VERSION/" charts/flask-app/Chart.yaml
          cat charts/flask-app/Chart.yaml  # Debugging to verify update
              
      - name: Package Helm Chart
        run: |
          helm package charts/flask-app
          mv flask-app-*.tgz charts/
    
      - name: Upload Helm Chart to S3
        run: |
          aws s3 cp charts/flask-app-*.tgz s3://helm-flask-star-images/charts/
    
      - name: Generate and Upload index.yaml
        run: |
          helm repo index charts/ --url https://helm-flask-star-images.s3.amazonaws.com/charts 
          aws s3 cp charts/index.yaml s3://helm-flask-star-images/charts/index.yaml

      - name: delete flask-app from k8s
        run: |
          set -ex
          kubectl delete all --all || true

      - name: Add Helm Repo
        run: |
          helm repo add flask-repo https://helm-flask-star-images.s3.us-east-1.amazonaws.com/charts
          helm repo update


      - name: deploy flask-app to k8s
        run: |
          set -ex
          gcloud components update
          gcloud components install gke-gcloud-auth-plugin
          helm upgrade --install ariel-flask-app flask-repo/flask-app
      
      - name: Verify Monitor Stack Is Up & Running # -q on grep is quiet mode.
        run: |
          set -x
            
          pwd
          echo "$GITHUB_WORKSPACE"
  
          if helm list -n monitor | grep -qi prometheus; then
            echo "monitor stack release exists, checking it is up & running."
  
          if helm status prometheus -n monitor | grep -iq "STATUS: deployed" && \
             kubectl get pods -n monitor | grep -iq grafana; then
             echo "monitor stack is up & running, now checking logging stack.."
          else
              echo "release might be broken - reinstalling monitor stack from scratch.."
              cd charts/monitor/
              helm uninstall prometheus -n monitor
              helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
              helm install prometheus prometheus-community/kube-prometheus-stack \
                -n monitor -f prom-values.yaml
              kubectl apply -f visitors_dashboards.yaml
          fi
  
          else
            cd charts/monitor/
            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
            helm install prometheus prometheus-community/kube-prometheus-stack \
              -n monitor -f prom-values.yaml
            kubectl apply -f visitors_dashboards.yaml
          fi
  
          echo "monitor stack is ok.."
  
      # - name: Verify Logging Stack Is Up & Running
      #   run: |
      #     set -x
  
      #     if helm list -n monitor | grep -iq loki; then
      #        echo "loki stack release exists, checking it is up & running."
  
      #     if helm status loki -n monitor | grep -iq "STATUS: deployed" && \
      #        kubectl get svc -n monitor | grep -qi loki; then
      #        echo "loki stack is up & running"
      #     else
      #         echo "release might be broken - reinstalling loki-stack from scratch.."
      #         cd charts/logging/
      #         helm uninstall loki -n monitor
      #         helm repo add grafana https://grafana.github.io/helm-charts
      #         helm install loki grafana/loki-stack \
      #           --set grafana.enabled=false --set promtail.enabled=true \
      #           --set loki.image.tag=2.9.3 -n monitor -f loki-values.yaml 
      #       fi
  
      #     else
      #       cd charts/logging/
      #       helm repo add grafana https://grafana.github.io/helm-charts
      #       helm install loki grafana/loki-stack \
      #         --set grafana.enabled=false --set promtail.enabled=true \
      #         --set loki.image.tag=2.9.3 -n monitor -f loki-values.yaml
      #     fi
  
      #       echo "loki stack is ok.."
      

