# name: Build , Test and Deploy an app to AKS

# on:
#   push:
#     branches: [ "main" ]
#     paths:
#       - "charts/**"
#   pull_request:
#     branches: [ "main" ]
#     paths:
#       - "charts/**"

# jobs:
#   buildImage:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3


#       - name: Login to Docker Hub # prepares the environment. 
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }} # github secrets
#           password: ${{ secrets.DOCKER_PASSWORD }} # github secrets
      

#       - name: Install Docker Compose
#         run: |
#             curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#             chmod +x /usr/local/bin/docker-compose
#             docker-compose --version  # Verify Docker Compose installation

#       - name: Set Environment Variables # GITHUB_ENV - just to access them quicker in current job by name only.
#         run: |
#             echo "IMAGE_NAME=arielk2511/star_meme_sql_compose" >> $GITHUB_ENV
#             echo "IMAGE_TAG=1.0.${{ github.run_number }}" >> $GITHUB_ENV
#             echo "DB_HOST=${{ vars.DB_HOST }}" >> $GITHUB_ENV
#             echo "DB_USER=${{ vars.DB_USER }}" >> $GITHUB_ENV
#             echo "DB_NAME=${{ vars.DB_NAME }}" >> $GITHUB_ENV
#             echo "FLASK_PORT=${{ vars.FLASK_PORT }}" >> $GITHUB_ENV
#             echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
      
#       - name: Debug Environment Variables
#         run: |
#               echo "IMAGE_NAME=${IMAGE_NAME}"
#               echo "IMAGE_TAG=${IMAGE_TAG}"

#       - name: Build Docker Compose Image
#         run: |
#             pwd
#             ls
#             docker build -t ${IMAGE_NAME}:latest .
#             docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
#         env:
#             IMAGE_NAME: ${{ env.IMAGE_NAME }}
#             IMAGE_TAG: ${{ env.IMAGE_TAG }}
  
#       - name: Push Docker Image
#         run: |
#             docker images    
#             docker push ${IMAGE_NAME}:${IMAGE_TAG}
#             docker push ${IMAGE_NAME}:latest

#       - name: Run Tests
#         run: |
#             docker compose up -d  # Start containers
#             echo "Waiting for application to start..."
#             until curl --fail --max-time 120 http://localhost:5000; do
#               echo "Waiting for application to start..."
#               sleep 5
#             done
#             echo "Application started successfully!"
#   deploy:
#     permissions:
#       contents: read
#       id-token: write
#     runs-on: ubuntu-latest
#     needs: [buildImage]
#     steps:
#       # Checks out the repository this file is in
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2
#         with: 
#           terraform_wrapper: false


#       - name: Configure AWS Credentials # for s3 tf remote state - accessing s3 bucket.
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1
          
#       # Logs in with your Azure credentials
#       - name: Azure login
#         run: |
#           set -ex
#           az login --service-principal \
#               --username "${{ secrets.AZURE_CLIENT_ID }}"  \
#               --password "${{ secrets.AZURE_CLIENT_SECRET }}" \
#               --tenant "${{ secrets.AZURE_TENANT_ID }}"

#       # Use kubelogin to configure your kubeconfig for Azure auth
#       - name: Terraform Init
#         env:
#           ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#         run: |
#           cd terraform-azure
#           terraform init

#       - name: Terraform Apply # update cluster infrastructure.
#         env:
#           ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#         run: |
#           cd terraform-azure
#           terraform apply -auto-approve

#       - name: setup kubectl
#         uses: azure/setup-kubectl@v4
#         with:
#           version: 'v1.31.0'
          
#       - name: Install Helm
#         uses: azure/setup-helm@v3
#         with:
#             version: v3.12.0  # Update to latest version if needed
        
#       - name: Update Helm Chart Version
#         run: |
#           CHART_VERSION="1.0.${{ github.run_number }}"
#           echo "Updating Chart version to $CHART_VERSION"
#           sed -i "s/^version:.*/version: $CHART_VERSION/" charts/flask-app/Chart.yaml
#           sed -i "s/^appVersion:.*/appVersion: $CHART_VERSION/" charts/flask-app/Chart.yaml
#           cat charts/flask-app/Chart.yaml  # Debugging to verify update
            
#       - name: Package Helm Chart
#         run: |
#           helm package charts/flask-app
#           mv flask-app-*.tgz charts/
  
#       - name: Upload Helm Chart to S3
#         run: |
#           aws s3 cp charts/flask-app-*.tgz s3://helm-flask-star-images/charts/
  
#       - name: Generate and Upload index.yaml
#         run: |
#           helm repo index charts/ --url https://helm-flask-star-images.s3.amazonaws.com/charts 
#           aws s3 cp charts/index.yaml s3://helm-flask-star-images/charts/index.yaml
  
#       - name: Verify Helm Repo
#         run: |
#           helm repo add flask-repo https://helm-flask-star-images.s3.amazonaws.com/charts
#           helm repo update

#       - name: Set AKS Context # uses az aks get-credentials internally.
#         uses: azure/aks-set-context@v3
#         with:
#           resource-group: ${{ vars.AZURE_CLUSTER_RESOURCE_GROUP }}
#           cluster-name: ${{ vars.AZURE_CLUSTER_NAME }}


#       - name: deploy flask-app to k8s
#         run: |
#           set -ex
#           kubectl delete all --all


#       - name: deploy flask-app to k8s
#         run: |
#           set -ex
#           cd charts
#           helm upgrade --install flask-app flask-app

        
        
