name: CI 

on:
  push:
    branches: [ "main" ]
    paths:
      - "app.py"
      - "templates/**"
      - "init.sql"
  pull_request:
    branches: [ "main" ]
    paths:
      - "app.py"
      - "templates/**"
      - "init.sql"

jobs:

  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}  # Your Docker Hub username
        password: ${{ secrets.DOCKER_PASSWORD }}  # Your Docker Hub password or access token

    - name: Build Docker image
      id: build_docker
      run: |
        IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/star_meme_sql_compose
        VERSION=1.0.${{ github.run_number }}
        docker build -t $IMAGE_NAME:latest .
        docker build -t $IMAGE_NAME:$VERSION .
        echo "IMAGE=$IMAGE_NAME" >> $GITHUB_ENV
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Push Docker image to Docker Hub
      if: github.ref_name == 'main'
      run: |
       docker push ${{ env.IMAGE}}:latest
       docker push ${{ env.IMAGE }}:${{ env.VERSION }}  

    - name: Update values.yaml with version
      run: |
         # Update the image tag in values.yaml with the dynamically generated VERSION
         sed -i "s/tag:.*/tag: \"${{ env.VERSION }}\"/" charts/flask-app/values.yaml
         cat charts/flask-app/values.yaml  # Print out the values.yaml for debugging
    
    - name: Set up Docker Compose environment variables
      run: |
         echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> $GITHUB_ENV
         echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
         echo "DB_HOST=${{ vars.DB_HOST }}" >> $GITHUB_ENV
         echo "DB_NAME=${{ vars.DB_NAME }}" >> $GITHUB_ENV
         echo "DB_USER=${{ vars.DB_USER }}" >> $GITHUB_ENV
         echo "FLASK_PORT=${{ vars.FLASK_PORT }}" >> $GITHUB_ENV

    - name: Run Tests
      run: |
        docker compose up -d  # Start containers
        echo "Waiting for application to start..."
        until curl --fail --max-time 120 http://localhost:5000; do
          echo "Waiting for application to start..."
          sleep 5
        done
        echo "Application started successfully!"

    - name: Create Pull Request (Other Branches)
      if: github.ref_name != 'main'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "Build Docker image for branch ${{ github.ref_name }}"
        title: "Build Docker image for branch ${{ github.ref_name }}"
        body: |
            This pull request includes the Docker image build for branch ${{ github.ref_name }}.
            Built versions:
            - `latest`
            - `${{ env.VERSION }}`
        base: main
        branch: ${{ github.ref_name }}
